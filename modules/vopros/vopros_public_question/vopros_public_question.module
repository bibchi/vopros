<?php

/**
 * @file
 */

include_once('vopros_public_question.features.inc');

module_load_include('inc', 'vopros_public_question', 'includes/vopros_public_question.service');

/**
 * Implementation of hook_init().
 */
function vopros_public_question_init() {
  drupal_add_css(drupal_get_path('module', 'vopros_public_question') . '/theme/vopros_public_question.base.css');
}

/**
 * Implements hook_entity_info().
 */
function vopros_public_question_entity_info() {
  $return = array(
    'vopros_public_question' => array(
      'label' => t('Public question', array(), array('context' => 'a vopros question')),
      'entity class' => 'VoprosPublicQuestion',
      'controller class' => 'VoprosPublicQuestionEntityController',
      'base table' => 'vopros_public_question',
      'revision table' => 'vopros_public_question_revision',
      'fieldable' => TRUE,
      'uri callback' => 'vopros_public_question_uri',
      'entity keys' => array(
        'id' => 'public_question_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_public_question' => array(
          'label' => t('Public question', array(), array('context' => 'a vopros public question')),
          'admin' => array(
            'path' => 'admin/vopros/config/public-question',
            'access arguments' => array('administer questions'),
          ),
        ),
      ),
      'load hook' => 'vopros_public_question_load',
      'view modes' => array(
        'default' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_public_question_access',
      // Uncommet to add views integration.
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Entity uri callback.
 */
function vopros_public_question_uri($public_question) {
  return array(
    'path' => 'admin/vopros/public-questions/' . $public_question->public_question_id,
  );
}

/**
 * Implements hook_enable().
 */
function vopros_public_question_enable() {
  vopros_public_question_configure_question();
}

/**
 * Configure the vopros email entity with fields.
 */
function vopros_public_question_configure_question() {
  $type = 'vopros_public_question';
  $bundle = 'vopros_public_question';

  // Create a taxonomy term reference field
  $field_name = 'vopros_public_question_subject';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => -1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'assigned' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'vopros_question_subject_catagory',
            'parent' => 0,
          ),
        ),
      ),
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('Subject'),
      'widget' => array(
        'type' => 'options_buttons',
      ),
      'settings' => array(),

      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implementation of hook_menu().
 */
function vopros_public_question_menu() {
  return array(
    'admin/vopros/config/public-question' => array(
      'title' => 'Public question settings',
      'description' => 'Configure general question settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_public_question_settings_form'),
      'access arguments' => array('administer questions'),
      'file' => 'includes/vopros_public_question.admin.inc',
    ),
    'admin/vopros/config/public-question/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/public-questions/%vopros_public_question' => array(
    ),
    'admin/vopros/public-questions/%vopros_public_question/view' => array(
      'title' => 'View',
       'type' => MENU_DEFAULT_LOCAL_TASK,
       'weight' => -10,
    ),
    'admin/vopros/public-questions/%vopros_public_question/edit' => array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_public_question_form', NULL, 3),
      'access callback' => 'vopros_public_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_public_question.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/public-questions/new/%vopros_question' => array(
      'title' => 'Publish question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_public_question_form', 4),
      'access callback' => 'vopros_public_question_access',
      'access arguments' => array('create'),
      'file' => 'includes/vopros_public_question.admin.inc',
    ),
  );
}


/**
 * Implements hook_permission().
 */
function vopros_public_question_permission() {
  $permissions = array(
    'administer public questions' => array(
      'title' => t('Administer public questions'),
      'restrict access' => TRUE,
    ),
    'access public questions' => array(
      'title' => t('Access public questions'),
      'restrict access' => TRUE,
    ),
    'create public questions' => array(
      'title' => t('Create public questions'),
      'restrict access' => TRUE,
    ),
    'edit public questions' => array(
      'title' => t('Edit any public question'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_public_question_views_data_alter(&$data) {
  $data['vopros_public_question']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'question',
  );
}

/**
 * Checks question access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_public_question_access($op, $public_question = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any question for administrators.
  if (user_access('administer public questions', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access questions permission
  // or to a user's own questions with the view own questions permission.
  if ($op == 'view') {
    if (user_access('access public questions', $account)) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create public questions', $account)) {
    return TRUE;
  }

  if (($op == 'update' || $op == 'delete') && user_access('edit any public question', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Create a new question object
 */
function vopros_public_question_new($values = array()) {
  return entity_create('vopros_public_question', $values);
}

/**
 * Loads an question by ID.
 */
function vopros_public_question_load($public_question_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $public_questions = vopros_public_question_load_multiple(array($public_question_id), $conditions, $reset);
  return $public_questions ? reset($public_questions) : FALSE;
}

/**
 * Loads an question by ID.
 */
function vopros_public_question_question_id_load($question_id, $reset = FALSE) {
  $conditions = array('question_id' => $question_id);
  $public_questions = vopros_public_question_load_multiple(FALSE, $conditions, $reset);
  return $public_questions ? reset($public_questions) : FALSE;
}



/**
 * Loads a public question by question_id.
 */
function vopros_public_question_load_by_question_id($question_id, $reset = FALSE) {
  $public_questions = vopros_public_question_load_multiple(FALSE, array('question_id' => $question_id), $reset);
  return $public_questions ? reset($public_questions) : FALSE;
}

/**
 * Loads an revision of a question.
 */
function vopros_public_question_revision_load($revision_id) {
  $public_questions = vopros_public_question_load_multiple(FALSE, array('revision_id' => $revision_id), FALSE);
  return $public_questions ? reset($public_questions) : FALSE;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $public_question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_public_question} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal question loading cache.
 *
 * @return
 *   An array of question objects indexed by question_id.
 */
function vopros_public_question_load_multiple($public_question_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_public_question', $public_question_ids, $conditions, $reset);
}

/**
 * Implements hook_form_alter().
 */
function vopros_public_question_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'vopros_email_form':
    case 'vopros_sms_form':
      $count = db_select('vopros_public_question')
        ->condition('question_id', $form['answer']['#value']->question_id)
        ->countQuery()
        ->execute()
        ->fetch();

      if ($count->expression == 0) {
        $form['action']['publish'] = array(
          '#type' => 'checkbox',
          '#title' => t('Publish question and answer'),
        );
        $form['#submit'][] = 'vopros_public_question_publish_submit';
      }
      break;
  }
}

/**
 * Submit handler for sending out questions that may need to be published.
 */
function vopros_public_question_publish_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['publish'])) {
    $form_state['redirect'] = 'admin/vopros/public-questions/new/' . $form['answer']['#value']->question_id;
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function vopros_public_question_field_extra_fields() {
  $extra = array();

  $extra['vopros_question']['vopros_question'] = array(
    'form' => array(
      'public_question' => array(
        'label' => t('Public question'),
        'description' => t('Link to the public version of this question if it exists.'),
        'weight' => 10,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_vopros_question_view_alter().
 */
function vopros_public_question_vopros_question_view_alter(&$build, $bundle) {
  $question = $build['#question'];
  $public_question = vopros_public_question_load_by_question_id($question->question_id);
  if ($public_question) {
    $build['public_question'] = array(
      '#public_question' => $public_question,
      '#theme' => 'vopros_public_question_link',
    );
  }
  elseif ($question->question_status == 'answered') {
    $build['public_question'] = array(
      '#question' => $question,
      '#theme' => 'vopros_public_question_new_link',
    );
  }
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_public_question_vopros_question_activity_feed($question, &$feed) {
  // Do this by question status for now.
  /*$public_question = vopros_public_question_load_by_question_id($question->question_id);
  if ($public_question->status == 'published') {
    $feed['public_question_' . $public_question->public_question_id] = array(
      '#public_question' => $public_question,
      '#theme' => 'vopros_public_question_feed',
      '#weight' => - $public_question->created,
    );
  }*/
}

/**
 * Implements hook_theme().
 */
function vopros_public_question_theme() {
  $path = drupal_get_path('module', 'vopros_public_question') . '/theme';
  return array(
    'vopros_public_question_feed' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'vopros_public_question.theme.inc',
    ),
    'vopros_public_question_link' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'vopros_public_question.theme.inc',
    ),
    'vopros_public_question_new_link' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'vopros_public_question.theme.inc',
    ),
  );
}

/**
 * Get agency id.
 *
 * Returns agency id, falling back to ting_agency, if configured.
 */
function _vopros_public_question_agency_id() {
  return variable_get('vopros_public_question_agency_id', variable_get('ting_agency', NULL));
}
