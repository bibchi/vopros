<?php

/**
 * @file
 */

/**
 * Implements hook_init().
 */
function vopros_base_init() {
  if (arg(0) == 'vopros' || arg(1) == 'vopros') {
    drupal_add_css(drupal_get_path('module', 'vopros_base') . '/theme/vopros_base.theme.css');
  }
}

/**
 * Implements hook_menu().
 */
function vopros_base_menu() {
  // Top level "Vopros" container.
  return array(
    'admin/vopros' => array(
      'title' => 'Vopros',
      'description' => 'Administer vopros.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
      'weight' => -7,
    ),

    'admin/vopros/config' => array(
      'title' => 'Configuration',
      'description' => 'Configure settings and business rules for vopros.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 10,
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    ),
  );

  return $items;
}

/**
 * Callback for getting entity properties
 */
function vopros_base_get_properties($entity, array $options, $name) {
  if ($name == 'user') {
    return $entity->uid;
  }
  return $entity->{$name.'_id'};
}

/**
 * Callback for setting line item properties.
 */
function vopros_base_set_properties($entity, $name, $value) {
  if ($name == 'user') {
    return $entity->uid = $value;
  }
  return $entity->{$name.'_id'} = $value;
}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function vopros_base_embed_view($view_id, $display_id = 'default', $arguments = array()) {
  // Load the cart line item View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific line items for this order.
  $view->set_arguments($arguments);

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  // Return the rendered View.
  return $view->render();
}

/**
 * Implements hook_permission().
 */
function vopros_base_permission() {
  $permissions = array(
    'administer vopros' => array(
      'title' => t('Access to various vopros administration'),
    ),
    'access advances admin pages' => array(
      'title' => t('Access advances admin pages (Structure, Config and Help)'),
    ),
  );

  return $permissions;
}

function vopros_base_menu_alter(&$items) {
  $items['admin/structure']['access arguments'] = array('access advances admin pages');
  $items['admin/config']['access arguments'] = array('access advances admin pages');
  $items['admin/help']['access arguments'] = array('access advances admin pages');
}

/**
 * Implements hook_field_views_data_alter().
 */
function vopros_base_field_views_data_alter(&$result, $field, $module) {
  if ($module == 'taxonomy') {
    if (isset($result['field_data_' . $field['field_name']][$field['field_name'] . '_tid']['filter']['handler'])) {
      $result['field_data_' . $field['field_name']][$field['field_name'] . '_tid']['filter']['handler'] = 'vopros_base_taxonomy_tid_filter_handler';
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function vopros_base_field_formatter_info() {
  return array(
    'vopros_base_default' => array(
      'label' => t('Generic file with images'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function vopros_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'vopros_base_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'vopros_base_file_link',
          '#file' => (object) $item,
        );
      }
      break;
  }

  return $element;
}

function vopros_base_theme() {
  return array(
    'vopros_base_file_link' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL),
    )
  );
}

function theme_vopros_base_file_link($variables) {
  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);

  if (isset($file->filemime) && strpos(strtolower($file->filemime), 'image') !== FALSE) {
    $icon = theme('image_style', array('path' => $file->uri, 'style_name' => 'thumbnail', 'attributes' => array('class' => 'preview')));
  }
  else {
    $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
  }


  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
}
