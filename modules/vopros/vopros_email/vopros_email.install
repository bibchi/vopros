<?php

/**
 * @file
 * Install and update hooks for vopros_email.
 */

/**
 * Implements hook_schema().
 */
function vopros_email_schema() {
  $schema = array();

  $schema['vopros_email'] = array(
    'description' => 'The base table for orders.',
    'fields' => array(
      'email_id' => array(
        'description' => 'The primary identifier for an email.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'question_id' => array(
        'description' => 'Reference to the question this email belings to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'answer_id' => array(
        'description' => 'Reference to the answer being emailed if any.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the user emailing the answer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'answer_uid' => array(
        'description' => 'The uid of the user who last edited the answer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'email' => array(
        'description' => 'The actual email to recieve the mail.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'email_content' => array(
        'description' => 'The actual email that has been asked.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'subject' => array(
        'description' => 'The subject of the email.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'reply_to' => array(
        'description' => 'Reply to of the mail.',
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => '255',
      ),
      'type' => array(
        'description' => 'The type of mail, outgoing/ingoing',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status of the email.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {vopros_email_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the email was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the email was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('email_id'),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'type' => array('type'),
      'question_id' => array('question_id'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'vopros_email_revision',
        'columns' => array('revision_id' => 'revision_id'),
      ),
      'answer' => array(
        'table' => 'vopros_answer',
        'columns' => array('answer_id' => 'answer_id'),
      ),
    ),
  );

  $schema['vopros_email_revision'] = array(
    'description' => 'Saves information about each saved revision of a {vopros_email}.',
    'fields' => array(
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that created this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'email_id' => array(
        'description' => 'The {vopros_email}.email_id of the email this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'question_id' => array(
        'description' => 'Reference to the question this email belings to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'answer_id' => array(
        'description' => 'The {vopros_answer}.answer_id of the answer this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'answer_uid' => array(
        'description' => 'The uid of the user who last edited the answer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the user emailing the answer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'email_content' => array(
        'description' => 'The actual email that has been asked.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'subject' => array(
        'description' => 'The status of the email.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'reply_to' => array(
        'description' => 'Reply to of the mail.',
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => '255',
      ),
      'status' => array(
        'description' => 'The status of the email.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of mail, outgoing/ingoing',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created/changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'email_id' => array('email_id'),
      'question_id' => array('question_id'),
      'type' => array('type'),
    ),
    'foreign keys' => array(
      'email' => array(
        'table' => 'vopros_email',
        'columns' => array('email_id' => 'email_id'),
      ),
    ),
  );

  $schema['vopros_email_transfers'] = array(
    'description' => 'Stores information about emails being transferred from one question to another.',
    'fields' => array(
      'email_transfer_id' => array(
        'description' => 'The primary identifier for an email transfer record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'email_id' => array(
        'description' => 'The {vopros_email}.email_id of the email this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the user performing the transfer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'origin_question_id' => array(
        'description' => 'The id of the question the email was coming from.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'target_question_id' => array(
        'description' => 'The id of the question the email is transferred to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'transfer_time' => array(
        'description' => 'The Unix timestamp when this email was transferred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('email_transfer_id'),
    'indexes' => array(
      'email_id' => array('email_id'),
      'origin_question_id' => array('origin_question_id'),
      'target_question_id' => array('target_question_id'),
    ),
  );

  return $schema;
}

/**
 * Add vopros_email_transfers table.
 */
function vopros_email_update_7000(&$sandbox) {
  db_create_table('vopros_email_transfers', array(
    'description' => 'Stores information about emails being transferred from one question to another.',
    'fields' => array(
      'email_transfer_id' => array(
        'description' => 'The primary identifier for an email transfer record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'email_id' => array(
        'description' => 'The {vopros_email}.email_id of the email this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The uid of the user performing the transfer.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'origin_question_id' => array(
        'description' => 'The id of the question the email was comming from.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'target_question_id' => array(
        'description' => 'The id of the question the email is transferred to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'transfer_time' => array(
        'description' => 'The Unix timestamp when this email was transferred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('email_transfer_id'),
    'indexes' => array(
      'email_id' => array('email_id'),
      'origin_question_id' => array('origin_question_id'),
      'target_question_id' => array('target_question_id'),
    ),
  ));
}

/**
 * Add answer_uid to email entity tables.
 */
function vopros_email_update_7001(&$sandbox) {
  db_add_field('vopros_email', 'answer_uid', array(
    'description' => 'The uid of the user who last edited the answer.',
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
  ));
  db_add_field('vopros_email_revision', 'answer_uid', array(
    'description' => 'The uid of the user who last edited the answer.',
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add reply_to field.
 */
function vopros_email_update_7002(&$sandbox) {
  db_add_field('vopros_email', 'reply_to', array(
    'description' => 'Reply to of the mail.',
    'type' => 'varchar',
    'not null' => TRUE,
    'default' => '',
    'length' => '255',
  ));
  db_add_field('vopros_email_revision', 'reply_to', array(
    'description' => 'Reply to of the mail.',
    'type' => 'varchar',
    'not null' => TRUE,
    'default' => '',
    'length' => '255',
  ));
}

/**
 * Rename question answered email macro variables.
 */
function vopros_email_update_7101() {
  if ($value = variable_get('vopros_email_answered_question_subject_macro', FALSE)) {
    variable_set('vopros_email_subject_macro_answered_question', $value);
    variable_del('vopros_email_answered_question_subject_macro');
  }
  if ($value = variable_get('vopros_email_answered_question_macro', FALSE)) {
    variable_set('vopros_email_macro_answered_question', $value);
    variable_del('vopros_email_answered_question_macro');
  }
}

/**
 * Add email_id index to vopros_email_revision.
 */
function vopros_email_update_7102() {
  db_add_index('vopros_email_revision', 'email_id', array('email_id'));
}

/**
 * Add question_id indexes to vopros_email and vopros_email_revision.
 */
function vopros_email_update_7103() {
  db_add_index('vopros_email', 'question_id', array('question_id'));
  db_add_index('vopros_email_revision', 'question_id', array('question_id'));
}
