<?php
/**
 * @file
 * Code for the Vopros user feature.
 */

define('VOPROS_USER_DEFAULT_URL', 'http://openagency.addi.dk/2.0/');

include_once 'vopros_user.features.inc';

/**
 * Implements hook_menu().
 */
function vopros_user_menu() {
  $items['admin/vopros/config/user'] = array(
    'title' => 'User settings',
    'description' => 'Configure Vopros user and role settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_user_settings_form'),
    'access arguments' => array('administer vopros'),
    'file' => 'vopros_user.admin.inc',
  );

  $items['admin/vopros/config/user/settings'] = array(
    'title' => 'User settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/vopros/config/user/roles'] = array(
    'title' => 'Role settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_user_role_settings_form'),
    'access arguments' => array('administer vopros'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'vopros_user.admin.inc',
  );

  $items['admin/vopros/config/user/roles/rebuild'] = array(
    'title' => 'Rebuild permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_user_role_settings_rebuild_form'),
    'access arguments' => array('administer vopros'),
    'type' => MENU_CALLBACK,
    'file' => 'vopros_user.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_field_views_data_alter().
 *
 * Adds in another filter on profile user library to limit the view to users
 * from the same library.
 */
function vopros_user_field_views_data_alter(&$data, $field, $module) {
  if ($module == 'list' && !empty($data['field_data_vopros_user_library'])) {
    $data['field_data_vopros_user_library']['vopros_user_same_agency'] = array(
      'group' => t('Profile'),
      'title' => t('Same library as current user'),
      'help' => t('Selects users from the same library.'),
      'filter' => $data['field_data_vopros_user_library']['vopros_user_library_value']['filter'],
    );
    $data['field_data_vopros_user_library']['vopros_user_same_agency']['filter']['handler'] = 'vopros_user_filter_user_same_agency';
  }
}

/**
 * Return list of libraries.
 *
 * Suitable for #options.
 *
 * @return array
 *   Name of libraries indexed by library id.
 */
function vopros_user_get_libraries() {
  $cache = cache_get('vopros_user_libraries', 'cache_field');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    $libraries = $cache->data;
  }
  else {
    if ($preset_libraries = variable_get('vopros_user_libraries', '')) {
      $libraries = array();
      foreach (explode("\n", $preset_libraries) as $line) {
        list($id, $name) = explode('|', $line);
        if ($id && $name) {
          $libraries[trim($id)] = trim($name);
        }
      }
    }
    else {
      // Get the libraries from openagency service if no cache was found.
      $libraries = _vopros_user_get_libraries_from_service();
    }
    asort($libraries);
    $include_libraries = variable_get('vopros_user_included_libraries', '');
    if ($include_libraries) {
      $include_libraries = explode(' ', $include_libraries);
      $libraries = array_intersect_key($libraries, array_flip(array_values($include_libraries)));
    }

    cache_set('vopros_user_libraries', $libraries, 'cache_field', REQUEST_TIME + 86400);
  }

  return $libraries;
}

/**
 * Get library listing from openagency service.
 */
function _vopros_user_get_libraries_from_service() {
  $libraries = array();
  $library_types = array('Folkebibliotek', 'Forskningsbibliotek');
  foreach ($library_types as $library_type) {
    $client = new NanoSOAPClient(variable_get('vopros_user_service_url', VOPROS_USER_DEFAULT_URL), array('namespaces' => array('' => 'http://oss.dbc.dk/ns/openagency')));
    $params = array(
      'authentication' => array(
        'groupIdAut' => variable_get('vopros_user_service_group', ''),
        'passwordAut' => variable_get('vopros_user_service_password', ''),
        'userIdAut' => variable_get('vopros_user_service_user', ''),
      ),
      'libraryType' => $library_type,
    );
    $xml = $client->call('nameListRequest', $params);
    $result = DOMDocument::loadXML($xml);
    foreach ($result->getElementsByTagName('agency') as $agency) {
      $libraries[$agency->getElementsByTagName('agencyId')->item(0)->nodeValue] = $agency->getElementsByTagName('agencyName')->item(0)->nodeValue;
    }
  }

  return $libraries;
}

/**
 * Implements hook_default_profile2_type().
 */
function vopros_user_default_profile2_type() {
  $items = array();
  $items['vopros_user_librarian'] = entity_import('profile2_type', '{
    "userCategory" : true,
    "userView" : true,
    "type" : "vopros_user_librarian",
    "label" : "Librarian",
    "weight" : "0",
    "data" : { "registration" : 1 }
  }');
  return $items;
}

/**
 * Implements hook_permission().
 */
function vopros_user_permission() {
  return array(
    'edit own shortcut links' => array(
      'title' => t('Edit own shortcut links'),
      'description' => t('Edit own shortcut links on user profile.'),
    ),
    'edit any shortcut links' => array(
      'title' => t('Edit any shortcut links'),
      'description' => t('Edit any shortcut links on user profile.'),
    ),
  );
}

/**
 * Implements hook_vopros_extra_permissions().
 */
function vopros_user_vopros_extra_permissions() {
  return array(
    'staff' => array(
      'access user profiles',
      'edit own vopros_user_librarian profile',
      'view any vopros_user_librarian profile',
      'view own vopros_user_librarian profile',
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_user_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if (!empty($form['profile_vopros_user_librarian']['vopros_user_shortcuts'])) {
    $access = user_access('edit any shortcut links') || (user_access('edit own shortcut links') && $user->uid == $form['#user']->uid);
    $form['profile_vopros_user_librarian']['vopros_user_shortcuts']['#access'] = $access;
  }
}

/**
 * Get a full name for a user, or fall back to using username.
 */
function vopros_user_name($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  // Try to get a name from a librarian profile.
  $profile = profile2_load_by_user($user, 'vopros_user_librarian');
  if ($profile) {
    $name = vopros_user_profile_user_name($profile);
  }
  else {
    // Else fall back to username.
    $name = $user->name;
  }

  return $name;
}

/**
 * Get a full user name from a profile.
 */
function vopros_user_profile_user_name($profile) {
  $wrapper = entity_metadata_wrapper('profile2', $profile);
  return $wrapper->vopros_user_first_name->value() . ' ' . $wrapper->vopros_user_last_name->value() . ' (' . $wrapper->user->name->value() . ')';
}

/**
 * Loads all librarians.
 *
 * @return array
 *   A uid => full name array.
 */
function vopros_user_get_librarians() {
  $profiles = profile2_load_multiple(FALSE, array('type' => 'vopros_user_librarian'));
  $options = array();
  foreach ($profiles as $profile) {
    $options[$profile->uid] = vopros_user_profile_user_name($profile);
  }
  return $options;
}

/**
 * Update user permissions.
 */
function vopros_user_update_permissions() {
  // Ensure that admin_role has all permissions, as core doesn't.
  $rid = variable_get('user_admin_role', 0);
  if ($rid) {
    $permissions = module_invoke_all('permission');
    $permissions = array_keys($permissions);

    if (!empty($permissions)) {
      user_role_grant_permissions($rid, $permissions);
    }
  }

  $rid = variable_get('vopros_user_staff_role', 0);
  if ($rid) {
    $permissions = array();
    // Grant Vopros permissions.
    $all_permissions = module_invoke_all('permission');
    foreach ($all_permissions as $name => $permission) {
      // We're only concerned about adding permissions.
      if (isset($permission['vopros roles']) && in_array('staff', $permission['vopros roles'])) {
        $permissions[] = $name;
      }
    }

    // Grant extra non-Vopros permissions.
    $extra_permissions = module_invoke_all('vopros_extra_permissions');
    if (isset($extra_permissions['staff'])) {
      $permissions = array_merge($permissions, $extra_permissions['staff']);
    }

    if (!empty($permissions)) {
      user_role_grant_permissions($rid, $permissions);
    }
  }
}

/**
 * Implements hook_flush_caches().
 *
 * Update permissions on cache clear.
 */
function vopros_user_flush_caches() {
  vopros_user_update_permissions();
}
