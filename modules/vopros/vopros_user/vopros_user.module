<?php
/**
 * @file
 * Code for the Vopros user feature.
 */

define('VOPROS_USER_DEFAULT_URL', 'http://openagency.addi.dk/2.0/');

include_once 'vopros_user.features.inc';

/**
 * Implements hook_menu().
 */
function vopros_user_menu() {
  $items['admin/vopros/config/user'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_user_settings_form'),
    'access arguments' => array('administer vopros'),
  );

  return $items;
}

/**
 * Implements hook_field_views_data_alter().
 *
 * Adds in another filter on profile user library to limit the view to users
 * from the same library.
 */
function vopros_user_field_views_data_alter(&$data, $field, $module) {
  if ($module == 'list' && !empty($data['field_data_vopros_user_library'])) {
    $data['field_data_vopros_user_library']['vopros_user_same_agency'] = array(
      'group' => t('Profile'),
      'title' => t('Same library as current user'),
      'help' => t('Selects users from the same library.'),
      'filter' => $data['field_data_vopros_user_library']['vopros_user_library_value']['filter'],
    );
    $data['field_data_vopros_user_library']['vopros_user_same_agency']['filter']['handler'] = 'vopros_user_filter_user_same_agency';
  }
}

/**
 * Settings form for the vopros_user module.
 */
function vopros_user_settings_form($form, &$form_state) {
  $form['vopros_user_service_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Service URL'),
    '#description' => t('URL of the OpenAgency service.'),
    '#default_value' => variable_get('vopros_user_service_url', VOPROS_USER_DEFAULT_URL),
  );

  $form['vopros_user_service_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Service group'),
    '#description' => t('Group used for authentication.'),
    '#default_value' => variable_get('vopros_user_service_group', ''),
  );

  $form['vopros_user_service_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Service user'),
    '#description' => t('User used for authentication.'),
    '#default_value' => variable_get('vopros_user_service_user', ''),
  );

  $form['vopros_user_service_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Service password'),
    '#description' => t('Password used for authentication.'),
    '#default_value' => variable_get('vopros_user_service_password', ''),
  );

  $form['vopros_user_included_libraries'] = array(
    '#type' => 'textarea',
    '#title' => t('Included libraries'),
    '#description' => t('Enter the library ids you want to include to the library list, seperate by space and leave empty to include all.'),
    '#default_value' => variable_get('vopros_user_included_libraries', ''),
  );

  return system_settings_form($form);
}

function vopros_user_get_libraries() {
  $cache = cache_get('vopros_user_libraries', 'cache_field');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    $libraries = $cache->data;
  }
  else {
    // Get the libraries from openagency service if no cache was found.
    $libraries = array();
    $library_types = array('Folkebibliotek', 'Forskningsbibliotek');
    foreach ($library_types as $library_type) {
      $client = new NanoSOAPClient(variable_get('vopros_user_service_url', VOPROS_USER_DEFAULT_URL), array('namespaces' => array('' => 'http://oss.dbc.dk/ns/openagency')));
      $params = array(
        'authentication' => array(
          'groupIdAut' => variable_get('vopros_user_service_group', ''),
          'passwordAut' => variable_get('vopros_user_service_password', ''),
          'userIdAut' => variable_get('vopros_user_service_user', ''),
        ),
        'libraryType' => $library_type,
      );
      $xml = $client->call('nameListRequest', $params);
      $result = DOMDocument::loadXML($xml);
      foreach ($result->getElementsByTagName('agency') as $agency) {
        $libraries[$agency->getElementsByTagName('agencyId')->item(0)->nodeValue] = $agency->getElementsByTagName('agencyName')->item(0)->nodeValue;
      }
    }
    asort($libraries);
    cache_set('vopros_user_libraries', $libraries, 'cache_field', REQUEST_TIME + 86400);
  }
  $include_libraries = variable_get('vopros_user_included_libraries', '');
  if ($include_libraries) {
    $include_libraries_list = explode(' ', $include_libraries);
    return array_intersect_key($libraries, array_flip(array_values($include_libraries_list)));
  }
  return $libraries;
}

/**
 * Implementation of hook_default_profile2_type().
 */
function vopros_user_default_profile2_type() {
  $items = array();
  $items['vopros_user_librarian'] = entity_import('profile2_type', '{
    "userCategory" : true,
    "userView" : true,
    "type" : "vopros_user_librarian",
    "label" : "Librarian",
    "weight" : "0",
    "data" : { "registration" : 1 }
  }');
  return $items;
}

/**
 * Implements hook_permission().
 */
function vopros_user_permission() {
  return array(
    'edit own shortcut links' =>  array(
      'title' => t('Edit own shortcut links'),
      'description' => t('Edit own shortcut links on user profile.'),
    ),
    'edit any shortcut links' =>  array(
      'title' => t('Edit any shortcut links'),
      'description' => t('Edit any shortcut links on user profile.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_user_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if (!empty($form['profile_vopros_user_librarian']['vopros_user_shortcuts'])) {
    $access = user_access('edit any shortcut links') || (user_access('edit own shortcut links') && $user->uid == $form['#user']->uid);
    $form['profile_vopros_user_librarian']['vopros_user_shortcuts']['#access'] = $access;
  }
}

/**
 * Get a full for a user, or fall back to using username.
 */
function vopros_user_name($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  // Try to get a name from a librarian profile.
  $profile = profile2_load_by_user($user, 'vopros_user_librarian');
  if ($profile) {
    $name = vopros_user_profile_user_name($profile);
  }
  else {
    // Else fall back to username.
    $name = $user->name;
  }

  return $name;
}

/**
 * Get a full user name from a profile.
 */
function vopros_user_profile_user_name($profile) {
  $wrapper = entity_metadata_wrapper('profile2', $profile);
  return $wrapper->vopros_user_first_name->value() . ' ' . $wrapper->vopros_user_last_name->value() . ' (' . $wrapper->user->name->value() . ')';
}

/**
 * Loads all librarians.
 *
 * @return array
 *   A uid => full name array.
 */
function vopros_user_get_librarians() {
  $profiles = profile2_load_multiple(FALSE, array('type' => 'vopros_user_librarian'));
  $options = array();
  foreach ($profiles as $profile) {
    $options[$profile->uid] = vopros_user_profile_user_name($profile);
  }
  return $options;
}
