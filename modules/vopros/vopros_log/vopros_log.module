<?php
/**
 * @file
 * The vopros_log module creates a log entity that can be asociated to
 * questions or answers. These logs are for internal use only.
 */

/**
 * Implements hook_entity_info().
 */
function vopros_log_entity_info() {
  $return = array(
    'vopros_log' => array(
      'label' => t('Log', array(), array('context' => 'a vopros log')),
      'controller class' => 'VoprosLogEntityController',
      'entity class' => 'VoprosLog',
      'base table' => 'vopros_log',
      // No revision table needed for logs.
      // Logs are simple and can't and shouldn't have fields.
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'log_id',
      ),
      'bundles' => array(
        'vopros_log' => array(
          'label' => t('Log', array(), array('context' => 'a vopros log')),
        ),
      ),
      'load hook' => 'vopros_log_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_log_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_permission().
 */
function vopros_log_permission() {
  $permissions = array(
    'administer logs' => array(
      'title' => t('Administer logs'),
      'restrict access' => TRUE,
    ),
    'access logs' => array(
      'title' => t('Access lists of logs, primarily for viewing and referencing'),
    ),
    'create logs' => array(
      'title' => t('Create logs'),
    ),
    'edit any log' => array(
      'title' => t('Edit any log'),
      'restrict access' => TRUE,
    ),
    'edit own logs' => array(
      'title' => t('Edit own logs'),
    ),
    'view own logs' => array(
      'title' => t('View own logs'),
    ),
  );

  return $permissions;
}


/**
 * Implementation of hook_init().
 */
function vopros_log_init() {
  drupal_add_css(drupal_get_path('module', 'vopros_log') . '/theme/vopros_log.base.css');
}

/**
 * Create a new log object
 */
function vopros_log_new($values = array()) {
  return entity_create('vopros_log', $values);
}

/**
 * Save a log.
 *
 * @param $log
 *    The log object
 */
function vopros_log_save($log) {
  entity_save('vopros_log', $log);
}

/**
 * Loads an question by ID.
 *
 * @param $log_id
 *    The log id
 * @param $reset
 *   Whether to reset the internal log loading cache.
 *
 * @return A vopros log object or FALSE if no log was found.
 */
function vopros_log_load($log_id, $reset = FALSE) {
  $logs = vopros_log_load_multiple(array($log_id), array(), $reset);
  return $logs ? reset($logs) : FALSE;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $log_ids
 *   An array of log IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_log} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal log loading cache.
 *
 * @return
 *   An array of log objects indexed by log_id.
 */
function vopros_log_load_multiple($log_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_log', $log_ids, $conditions, $reset);
}

/**
 * Checks log access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $log
 *   Optionally an anwer to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_log_access($op, $log = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any log for administrators.
  if (user_access('administer logs', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access orders permission
  // or to a user's own orders with the view own orders permission.
  if ($op == 'view') {
    if (user_access('access logs', $account)) {
      return TRUE;
    }
    elseif (user_access('view own logs', $account) && $log->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create logs', $account)) {
    return TRUE;
  }

  if (isset($order) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any log', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the uid.
    if ($account->uid && user_access('edit own logs', $account) && $log->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Show the add log entry form, optionally the existing entries.
 *
 * Note that answer id is only used when creating the log entry, not for
 * limiting the displayed entries (which still show all messages on the
 * question).
 *
 * @param array $form
 *   Form passed by Form API.
 * @param array $form_state
 *   Form state passed by Form API.
 * @param VoprosLog $log
 *   Existing log entry to copy default content from.
 * @param int $question_id
 *   Question id to create/show log entry for.
 * @param int $answer_id
 *   Answer id to create log entry for.
 * @param bool $show_messages
 *   Whether to show existing messages.
 */
function vopros_log_form($form, &$form_state, $log = NULL, $question_id = NULL, $answer_id = NULL, $show_messages = FALSE) {
  $form_state['show_messages'] = $show_messages;

  $form['question_id'] = array(
    '#type' => 'value',
    '#value' => $question_id,
  );

  $form['answer_id'] = array(
    '#type' => 'value',
    '#value' => $answer_id,
  );

  $form['log_content'] = array(
    '#type' => 'textarea',
    '#title' => t('Internal log'),
    '#default_value' => $log ? $log->log_content : '',
  );

  $form['save_log_message'] = array(
    '#type' => 'submit',
    '#value' => t('Add log message'),
    '#ajax' => array(
      'callback' => 'vopros_log_form_ajax_submit',
    )
  );

  if ($show_messages) {
    $form['log_messages'] = array(
      '#prefix' => '<div id="vopros-log-messages">',
      '#suffix' => '</div>',
    );
    $conditions = array();
    if ($question_id) {
      $conditions['question_id'] = $question_id;
    }
    $log_messages = vopros_log_load_multiple(array(), $conditions);

    // Sort the messages, vopros_log_load_multiple returns them in whatever
    // order the database returns them.
    uasort($log_messages, '_vopros_log_cmp');

    foreach ($log_messages as $log_message) {
      $form['log_messages'][] = array(
        '#log' => $log_message,
        '#theme' => 'vopros_log_question_feed',
      );
    }
  }

  return $form;
}

/**
 * Sort comparison function.
 *
 * Sorts items by date.
 */
function _vopros_log_cmp($a, $b) {
  return $b->created - $a->created;
}

/**
 * Handles saving the log.
 */
function vopros_log_form_ajax_submit(&$form, &$form_state) {
  $commands = array();
  if (!empty($form_state['values']['log_content'])) {
    global $user;
    $values = array(
      'question_id' => $form_state['values']['question_id'],
      'answer_id' => $form_state['values']['answer_id'],
      'log_content' => $form_state['values']['log_content'],
      'uid' => $user->uid,
    );
    $log = vopros_log_new($values);
    vopros_log_save($log);

    $commands[] = ajax_command_invoke('#edit-log-content', 'val', array(''));
    $commands[] = ajax_command_invoke('#log-status-message', 'remove', array(''));
    $commands[] = ajax_command_invoke('#edit-save-log-message', 'before', array('<div id="log-status-message"><div class="messages status">' . t('Log message created') . '</div></div>'));
    if ($form_state['show_messages']) {
      $log_message = theme('vopros_log_question_feed', array('log' => $log));
      $commands[] = ajax_command_invoke('#vopros-log-messages', 'prepend', array($log_message));
    }
  }
  else {
    $commands[] = ajax_command_invoke('#edit-save-log-message', 'before', array('<div id="log-status-message"><div class="messages error">' . t('Log message not created, cannot create an empty log message') . '</div></div>'));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_enyity_view_alter().
 */
function vopros_log_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'vopros_question' && $view_mode == 'administrator') {
    $entity->content['right']['log_form'] = drupal_get_form('vopros_log_form', NULL, $entity->question_id, NULL, TRUE);
  }
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_log_vopros_question_activity_feed($question, &$feed) {
  $logs = vopros_log_load_multiple(FALSE, array('question_id' => $question->question_id));
  foreach ($logs as $log_id => $log) {
    $feed['log_' . $log_id] = array(
      '#weight' => - $log->created,
      '#log' => $log,
      '#theme' => 'vopros_log_question_feed',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_answer_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, $form['answer']['#value']->answer_id, TRUE);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_email_question_contact_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_question_frontend_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_question_form_alter(&$form, &$form_state) {
  if ($form['question']['#value']->question_status != 'new') {
    $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
    $form['action']['log']['log_content']['#required'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_close_question_form_alter(&$form, &$form_state) {
  $form['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['log']['log_content']['#required'] = FALSE;
  $form['log']['save_log_message']['#access'] = FALSE;
  $form['#submit'] = array('vopros_log_form_vopros_question_close_question_form_submit', 'vopros_question_close_question_form_submit');
}

/**
 * Submit handler for the log part of the vopros_question_close_question_form().
 * @see vopros_log_form_vopros_question_close_question_form_alter().
 */
function vopros_log_form_vopros_question_close_question_form_submit(&$form, &$form_state) {
  global $user;
  if (trim($form_state['values']['log_content']) && $form_state['values']['reason'] != 'answered') {
    $values = array(
      'question_id' => $form_state['values']['question_id'],
      'log_content' => $form_state['values']['log_content'],
      'uid' => $user->uid,
    );
    $log = vopros_log_new($values);
    vopros_log_save($log);
  }
}

/**
 * Implements hook_theme().
 */
function vopros_log_theme() {
  $path = drupal_get_path('module', 'vopros_log') . '/theme';
  return array(
    'vopros_log_question_feed' => array(
      'render element' => 'log',
      'file' => 'vopros_log.theme.inc',
      'path' => $path,
    ),
  );
}
