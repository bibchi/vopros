<?php

/**
 * Implements hook_schema().
 */
function vopros_service_schema() {
  // Ensure that uuid.install is loaded for uuid_schema_field_definition().
  module_load_install('uuid');

  $schema = array();

  $schema['vopros_service'] = array(
    'description' => 'The base table for vopros services.',
    'fields' => array(
      'service_id' => array(
        'description' => 'The primary identifier for a vopros service.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'url' => array(
        'description' => 'The url of the service, used for posting messages to it.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'auth_key' => array(
        'description' => 'The secret key or auth token used for authentications.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'auth_type' => array(
        'description' => 'The type of authentication used for the vopros server, fx "secret_key", "oauth" etc.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {vopros_service_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_ingoing' => array(
        'description' => 'Boolean indicator, indicating if ingoing requests should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_help' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that ask for help should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_turn_over' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that turn over the question should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_turn_over_sms' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that turn over SMS questions should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the vopros_service was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the vopros_service was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('service_id'),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
      'client_id' => array('client_id'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'vopros_service_revision',
        'columns'=> array('revision_id' => 'revision_id'),
      ),
    ),
  );

  $schema['vopros_service_revision'] = array(
    'description' => 'Saves information about each saved revision of a {vopros_email}.',
    'fields' => array(
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that created this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'service_id' => array(
        'description' => 'The {vopros_service}.service_id of the email this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'url' => array(
        'description' => 'The url of the service, used for posting messages to it.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'auth_key' => array(
        'description' => 'The secret key or auth token used for authentications.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'auth_type' => array(
        'description' => 'The type of authentication used for the vopros server, fx "secret_key", "oauth" etc.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'allow_ingoing' => array(
        'description' => 'Boolean indicator, indicating if ingoing requests should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_help' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that ask for help should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_turn_over' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that turn over the question should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'allow_outgoing_turn_over_sms' => array(
        'description' => 'Boolean indicator, indicating if outgoing requests that turn over SMS questions should be allowed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created/changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('revision_id'),
    'foreign keys' => array(
      'service' => array(
        'table' => 'vopros_service',
        'columns'=> array('service_id' => 'service_id'),
      ),
    ),
  );

  // Not versioned, doesn't really make sense.
  $schema['vopros_service_question'] = array(
    'description' => 'Table for tracking questions forwarded or accepted from others.',
    'fields' => array(
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'direction' => array(
        'description' => 'The direction of the forward, "incoming" or "outgoing"',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type service "help" or "turn_over".',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('uuid', 'type', 'client_id'),
    'indexes' => array(
      'client_id' => array('client_id'),
    ),
  );

  // Fix name of uuid field.
  $schema['vopros_service_question']['fields']['uuid']['description'] = 'The UUID of the original question.';

  // Not versioned either.
  $schema['vopros_service_message'] = array(
    'description' => 'Table for inter-service messages.',
    'fields' => array(
      'service_message_id' => array(
        'description' => 'The primary identifier for a message.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'question_id' => array(
        'description' => 'The question the message is attached to.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'message_type' => array(
        'description' => 'Message type, "incoming" or "outgoing".',
        'type' => 'varchar',
        'length' => '255',
      ),
      'message_content' => array(
        'description' => 'The message body.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'message_answer' => array(
        'description' => 'Answer.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'message_from' => array(
        'description' => 'Message sender.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'message_uid' => array(
        'description' => 'UID of message sender, if outgoing.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the message was created/received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('service_message_id'),
    'indexes' => array(
      'question_id' => array('question_id'),
      'client_id' => array('client_id'),
    ),
  );

  return $schema;
}

/**
 * Add turn over SMS option.
 */
function vopros_service_update_7001() {
  db_add_field('vopros_service', 'allow_outgoing_turn_over_sms', array(
      'description' => 'Boolean indicator, indicating if outgoing requests that turn over SMS questions should be allowed.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ));
  db_add_field('vopros_service_revision', 'allow_outgoing_turn_over_sms', array(
      'description' => 'Boolean indicator, indicating if outgoing requests that turn over SMS questions should be allowed.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ));
}

/**
 * Change for new client system.
 */
function vopros_service_update_7002() {
  db_drop_field('vopros_service', 'machine_name');
  db_drop_field('vopros_service', 'label');
  db_add_field('vopros_service', 'client_id', array(
      'description' => 'The client site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
  db_add_unique_key('vopros_service', 'client_id', array('client_id'));

  db_drop_field('vopros_service_revision', 'machine_name');
  db_drop_field('vopros_service_revision', 'label');
  db_add_field('vopros_service_revision', 'client_id', array(
      'description' => 'The client site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));

  db_drop_field('vopros_service_question', 'machine_name');
  db_add_field('vopros_service_question', 'client_id', array(
      'description' => 'The client site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
  db_add_unique_key('vopros_service_question', 'client_id', array('client_id'));

  db_drop_field('vopros_service_message', 'service_machine_name');
  db_add_field('vopros_service_message', 'client_id', array(
      'description' => 'The client site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
  db_add_unique_key('vopros_service_message', 'client_id', array('client_id'));
}
