<?php

/**
 * Implements hook_schema().
 */
function vopros_question_schema() {
  $schema = array();

  $schema['vopros_question'] = array(
    'description' => 'The base table for questions.',
    'fields' => array(
      'question_id' => array(
        'description' => 'The primary identifier for an question.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {vopros_question_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The owner of the question, who is allowed to answer the question.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'question_title' => array(
        'description' => 'The question title, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'question_content' => array(
        'description' => 'The actual question that has been asked.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'question_status' => array(
        'description' => 'The status of the question.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'question_status_reason' => array(
        'description' => 'The status reason of the question. Provides different types of the same status like closed (spam) and closed (bad question).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'question_deadline' => array(
        'description' => 'The time limit for when the question should be answered by if any. Hours before it should be answered, -1 for unlimited.',
        'type' => 'int',
      ),
      'question_deadline_timestamp' => array(
        'description' => 'The timestamp for when the question deadline is. Used to sort and display time in views.',
        'type' => 'int',
      ),
      'question_usage' => array(
        'description' => 'How the question should be used.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'question_note' => array(
        'description' => 'A note about the question, like search queries etc.',
        'type' => 'text',
        'size' => 'big',
      ),
      // Info about the origin of the question
      'qanda_service_name' => array(
        'description' => 'The service that brought us the question. (deprecated)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'agency_id' => array(
        'description' => 'The agency/portal that sent the question. (deprecated)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'channel' => array(
        'description' => 'The channel used to ask the question.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'channel_id' => array(
        'description' => 'The sub-id of the channel used to ask the question .',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'channel_data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional channel data.',
      ),
      'referenced_by' => array(
        'description' => 'Referenced from.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_name' => array(
        'description' => 'The name of the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_email' => array(
        'description' => 'The email address for the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_postal_code' => array(
        'description' => 'The postal code of the person who sent in the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_mobile_phone' => array(
        'description' => 'The mobile phone number for the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_age' => array(
        'description' => 'The age of the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_gender' => array(
        'description' => 'The gender of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_field_of_study' => array(
        'description' => 'The field of study of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_library' => array(
        'description' => 'The library of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_answer_preference' => array(
        'description' => 'The way the user wants to recieve the answer.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the question was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the question was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('question_id'),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'question_status' => array('question_status'),
      'question_usage' => array('question_usage'),
      'qanda_service_name' => array('qanda_service_name'),
      'client_id' => array('client_id'),
      'channel' => array('channel'),
      'created' => array('created'),
      'changed' => array('changed'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'vopros_question_revision',
        'columns'=> array('revision_id' => 'revision_id'),
      ),
    ),
  );

  $schema['vopros_question_revision'] = array(
    'description' => 'Saves information about each saved revision of a {vopros_question}.',
    'fields' => array(
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that created this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'question_id' => array(
        'description' => 'The {vopros_question}.question_id of the question this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The owner of the question, who is allowed to answer the question.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'question_title' => array(
        'description' => 'The question title, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'question_content' => array(
        'description' => 'The actual question that has been asked.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'question_status' => array(
        'description' => 'The status name of this question.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'question_status_reason' => array(
        'description' => 'The status reason of the question. Provides different types of the same status like closed (spam) and closed (bad question).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'question_deadline' => array(
        'description' => 'The time limit for when the question should be answered by if any. Hours before it should be answered, -1 for unlimited.',
        'type' => 'int',
      ),
      'question_deadline_timestamp' => array(
        'description' => 'The timestamp for when the question deadline is. Used to sort and display time in views.',
        'type' => 'int',
      ),
      'question_usage' => array(
        'description' => 'How the question should be used.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'question_note' => array(
        'description' => 'A note about the question, like search queries etc.',
        'type' => 'text',
        'size' => 'big',
      ),
      // Info about the origin of the question
      'qanda_service_name' => array(
        'description' => 'The service that brought us the question. (deprecated)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'agency_id' => array(
        'description' => 'The agency/portal that sent the question. (deprecated)',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'client_id' => array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'channel' => array(
        'description' => 'The channel used to ask the question.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'channel_id' => array(
        'description' => 'The sub-id of the channel used to ask the question .',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'channel_data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional channel data.',
      ),
      'referenced_by' => array(
        'description' => 'Referenced from.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_name' => array(
        'description' => 'The name of the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_email' => array(
        'description' => 'The email address for the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_postal_code' => array(
        'description' => 'The postal code of the person who sent in the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_mobile_phone' => array(
        'description' => 'The mobile phone number for the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_age' => array(
        'description' => 'The age of the person that asked the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_gender' => array(
        'description' => 'The gender of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_field_of_study' => array(
        'description' => 'The field of study of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_library' => array(
        'description' => 'The library of the person asking the question.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'user_answer_preference' => array(
        'description' => 'The way the user wants to recieve the answer.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'question_id' => array('question_id'),
      'question_status' => array('question_status'),
      'question_usage' => array('question_usage'),
      'qanda_service_name' => array('qanda_service_name'),
      'client_id' => array('client_id'),
      'channel' => array('channel'),
      'revision_timestamp' => array('revision_timestamp'),
    ),
    'foreign keys' => array(
      'question' => array(
        'table' => 'vopros_question',
        'columns' => array('question_id' => 'question_id'),
      ),
    ),
  );

  $schema['vopros_question_client'] = array(
    'description' => 'The base table for clients of the service.',
    'fields' => array(
      'client_id' => array(
        'description' => 'The primary identifier for a client.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agency' => array(
        'description' => 'The machine name for this client.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {vopros_question_client_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'label' => array(
        'description' => 'Client name, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the question was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the question was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('client_id'),
    'unique keys' => array(
      'agency' => array('agency'),
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'created' => array('created'),
      'changed' => array('changed'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'vopros_question_revision',
        'columns' => array('revision_id' => 'revision_id'),
      ),
    ),
  );

  $schema['vopros_question_client_revision'] = array(
    'description' => 'Saves information about each saved revision of a {vopros_question_client}.',
    'fields' => array(
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'client_id' => array(
        'description' => 'The {vopros_question_client}.client_id of the client this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'agency' => array(
        'description' => 'The machine name for this client.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Client name, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'revision_timestamp' => array('revision_timestamp'),
    ),
    'foreign keys' => array(
      'question' => array(
        'table' => 'vopros_question',
        'columns' => array('client_id' => 'client_id'),
      ),
    ),
  );

  return $schema;
}

/**
 * Change question status from "in progres" to "active".
 */
function vopros_question_update_7000(&$sandbox) {
  // Update base table.
  db_update('vopros_question')
    ->fields(array(
      'question_status' => 'active',
    ))
    ->condition('question_status', 'in progress', '=')
    ->execute();

  // Update revisions.
  db_update('vopros_question_revision')
    ->fields(array(
      'question_status' => 'active',
    ))
    ->condition('question_status', 'in progress', '=')
    ->execute();

  return t('All questions has had their status updated.');
}

/**
 * Change question status from "locked" to "'assigned'".
 */
function vopros_question_update_7001(&$sandbox) {
  // Update base table.
  db_update('vopros_question')
    ->fields(array(
      'question_status' => 'assigned',
    ))
    ->condition('question_status', 'locked', '=')
    ->execute();

  // Update revisions.
  db_update('vopros_question_revision')
    ->fields(array(
      'question_status' => 'assigned',
    ))
    ->condition('question_status', 'locked', '=')
    ->execute();

  return t('All questions has had their status updated.');
}

/**
 * Update fields on questions.
 */
function vopros_question_update_7002(&$sandbox) {
  vopros_question_configure_question();
}

/**
 * Add indexes on vopros question table.
 */
function vopros_question_update_7003(&$sandbox) {
  // Add indexes on the main table.
  db_add_index('vopros_question', 'question_status', array('question_status'));
  db_add_index('vopros_question', 'question_usage', array('question_usage'));
  db_add_index('vopros_question', 'qanda_service_name', array('qanda_service_name'));
  db_add_index('vopros_question', 'created', array('created'));
  db_add_index('vopros_question', 'changed', array('changed'));
  // Add indexes on the revision table.
  db_add_index('vopros_question_revision', 'question_status', array('question_status'));
  db_add_index('vopros_question_revision', 'question_usage', array('question_usage'));
  db_add_index('vopros_question_revision', 'qanda_service_name', array('qanda_service_name'));
  db_add_index('vopros_question_revision', 'revision_timestamp', array('revision_timestamp'));
}

/**
 * Set published questions to answered
 */
function vopros_question_update_7004(&$sandbox) {
  // Update base table.
  db_update('vopros_question')
    ->fields(array(
      'question_status' => 'answered',
    ))
    ->condition('question_status', 'published')
    ->execute();
}

/**
 * Enable the better_exposed_filters module.
 */
function vopros_question_update_7005() {
  module_enable(array('better_exposed_filters'));
}

/**
 * Create tables for clients.
 */
function vopros_question_update_7006() {
  $schema = array();

  $schema['vopros_question_client'] = array(
    'description' => 'The base table for clients of the service.',
    'fields' => array(
      'client_id' => array(
        'description' => 'The primary identifier for a client.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agency' => array(
        'description' => 'The machine name for this client.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {vopros_question_client_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'label' => array(
        'description' => 'Client name, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the question was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the question was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('client_id'),
    'unique keys' => array(
      'agency' => array('agency'),
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'created' => array('created'),
      'changed' => array('changed'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'vopros_question_revision',
        'columns' => array('revision_id' => 'revision_id'),
      ),
    ),
  );

  $schema['vopros_question_client_revision'] = array(
    'description' => 'Saves information about each saved revision of a {vopros_question_client}.',
    'fields' => array(
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'client_id' => array(
        'description' => 'The {vopros_question_client}.client_id of the client this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'agency' => array(
        'description' => 'The machine name for this client.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Client name, the label of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => uuid_schema_field_definition(),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'revision_timestamp' => array('revision_timestamp'),
    ),
    'foreign keys' => array(
      'question' => array(
        'table' => 'vopros_question',
        'columns' => array('client_id' => 'client_id'),
      ),
    ),
  );

  foreach ($schema as $name => $def) {
    db_create_table($name, $def);
  }
}

/**
 * Add new qanda_service replacing fields.
 */
function vopros_question_update_7007() {
  $fields = array(
    'client_id' => array(
      array(
        'description' => 'The client site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      array(
        'indexes' => array(
          'client_id' => array('client_id'),
        ),
      ),
    ),
    'channel' => array(
      array(
        'description' => 'The channel used to ask the question.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      array(
        'indexes' => array(
          'channel' => array('channel'),
        ),
      ),
    ),
    'channel_id' => array(
      array(
        'description' => 'The sub-id of the channel used to ask the question .',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      array(),
    ),
    'channel_data' => array(
      array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional channel data.',
      ),
      array(),
    ),
  );
  $tables = array('vopros_question', 'vopros_question_revision');
  foreach ($tables as $table) {
    foreach ($fields as $name => $def) {
      db_add_field($table, $name, $def[0], $def[1]);
    }
  }
}

/**
 * Remove the vopros_question_qanda_service_options variable.
 */
function vopros_question_update_7008() {
  variable_del('vopros_question_qanda_service_options');
}

/**
 * Add question_id index to vopros_question_revision.
 */
function vopros_question_update_7101() {
  db_add_index('vopros_question_revision', 'question_id', array('question_id'));
}
