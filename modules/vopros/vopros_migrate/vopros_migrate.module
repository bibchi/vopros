<?php

// Define a custom exeption.
class VoprosQuestionDoesNotExist extends Exception {};
class VoprosPublicQuestionQuestionDoesNotExist extends Exception {};
class VoprosPublicQuestionCouldNotPublishQuestion extends Exception {};

/**
 * Implementation of hook_menu().
 */
function vopros_migrate_menu() {
  return array(
    'admin/vopros/config/migrate' => array(
      'title' => 'Migration settings',
      'description' => 'Configure external database used for migration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_setting_form'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
    ),
    'admin/vopros/config/migrate/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/vopros/migrate' => array(
      'title' => 'Migrate',
      'description' => 'Migration of old Q & A content to Vopros.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_perform_migrate_questions'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
    ),
    'admin/vopros/migrate/migrate-questions' => array(
      'title' => 'Migrate questions',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/vopros/migrate/migrate-users' => array(
      'title' => 'Migrate users',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_perform_migrate_users'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
    ),
    'admin/vopros/migrate/migrate-vocabolary' => array(
      'title' => 'Migrate vocabolary',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_perform_migrate_vocabolary'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
    ),
    'admin/vopros/migrate/migrate-public-question' => array(
      'title' => 'Migrate public questions',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_perform_migrate_public_questions'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
    ),
    'admin/vopros/migrate/cleanup-migrate-public-question' => array(
      'title' => 'Clean up migrated public questions',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_migrate_clean_up_migrate_public_questions'),
      'access arguments' => array('administer vopros_migrate'),
      'file' => 'vopros_migrate.admin.inc',
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function vopros_migrate_permission() {
  $permissions = array(
    'administer vopros_migrate' => array(
      'title' => t('Configure migration'),
    ),
  );

  return $permissions;
}


/**
 * Function to connect to the migration database.
 */
function vopros_migrate_connect() {
  $host = variable_get('vopros_migrate_host', '');
  $username = variable_get('vopros_migrate_username', '');
  $password = variable_get('vopros_migrate_password', '');
  $database = variable_get('vopros_migrate_database', '');
  // Itentionally kill errors when trying to connect.
  if (function_exists('mssql_connect')) {
    $link = @mssql_connect($host, $username, $password);
    return $link && @mssql_select_db($database, $link);
  }
  else {
    drupal_set_message(t("You need to install MSSQL for your PHP"), 'error');
    return FALSE;
  }
}

/**
 * Performs the actual migration of questions as a batch job.
 */
function _vopros_migrate_perform_migrate_questions($count, &$context) {
  if (vopros_migrate_connect()) {
    if(empty($context['sandbox'])) {
      // Get top question id:
      $result = mssql_fetch_object(mssql_query("SELECT TOP 1 QuestionId FROM Questions ORDER BY QuestionId DESC"));
      $top_question_id = $result->QuestionId;
      $progress = db_query("SELECT MAX(migrate_id) FROM {vopros_migrate} WHERE entity_type = 'question';")->fetchCol();
      // Set the current state of our import.
      $context['sandbox']['progress'] = (int) $progress[0];
      $context['sandbox']['max'] = min($top_question_id, $count + $progress[0]);
      $context['results']['count'] = 0;
    }
    // Get top question id:
    $min_question_id = $context['sandbox']['progress'];
    $max_question_id = $context['sandbox']['progress'] + 50;
    $query = mssql_query("SELECT q.*, c.catagory_id FROM Questions AS q
                          LEFT JOIN QA ON QA.QuestionId = q.QuestionId
                          LEFT JOIN Kbase_CatagoryConnections AS c ON c.QAId = QA.QAId
                          WHERE q.QuestionId BETWEEN $min_question_id AND $max_question_id ORDER BY q.QuestionId DESC");
    while ($row = mssql_fetch_object($query)) {
      // Format data:
      foreach ((array) $row as $key => $value) {
        $row->$key = utf8_encode($value);
      }
      $row->AnswerTimestamp = _vopros_migrate_mssql_date_convert($row->AnswerTimestamp);
      $row->QuestionTimestamp = _vopros_migrate_mssql_date_convert($row->QuestionTimestamp);
      $question = _vopros_migrate_create_question($row);
      if ($question) {
        $context['results']['count'] += 1;
        _vopros_migrate_create_answer($row, $question);
      }
    }
    $context['sandbox']['progress'] += 51;
    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
      $context['finished'] = $context['results']['count'] / $count;
    }
    $context['message'] = t('Migrating question with id @id - current migration status: @num/@total', array('@id' => $context['sandbox']['progress'], '@num' => $context['results']['count'], '@total' => $count));
  }
}

/**
 * Performs the actual migration of users as a batch job.
 */
function _vopros_migrate_perform_migrate_users($count, &$context) {
  global $user;
  if (vopros_migrate_connect()) {
    if (empty($context['sandbox'])) {
      // Get top user id:
      $result = mssql_fetch_object(mssql_query("SELECT TOP 1 UserId FROM Users ORDER BY UserId DESC"));
      $top_user_id = $result->UserId;
      $progress = db_query("SELECT MAX(migrate_id) FROM {vopros_migrate} WHERE entity_type = 'user';")->fetchCol();
      // Set the current state of our import.
      $context['sandbox']['progress'] = (int) $progress[0];
      $context['sandbox']['max'] = min($top_user_id, $count + $progress[0]);
      $context['results']['count'] = 0;
    }
    $min_user_id = $context['sandbox']['progress'];
    $max_user_id = $context['sandbox']['progress'] + 50;
    $query = mssql_query("SELECT * FROM Users WHERE UserId BETWEEN $min_user_id AND $max_user_id ORDER BY UserId DESC");
    while ($row = mssql_fetch_object($query)) {
      // Format data:
      foreach ((array) $row as $key => $value) {
        $row->$key = utf8_encode($value);
      }
      if (_vopros_migrate_create_user($row)) {
        $context['results']['count'] += 1;
      }
    }
    $context['sandbox']['progress'] += 51;
    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
    $context['message'] = t('Migrating user with id @id', array('@id' => $context['sandbox']['progress']));
  }
}

/**
 * Performs the actual migration of taxonomy terms.
 */
function _vopros_migrate_perform_migrate_vocabolary($count, &$context) {
  global $user;
  if (vopros_migrate_connect()) {
    if (empty($context['sandbox'])) {
      // Get top catagory id:
      $result = mssql_fetch_object(mssql_query("SELECT TOP 1 catagory_id FROM KbaseCatagories ORDER BY catagory_id DESC"));
      $top_term_id = $result->catagory_id;
      $progress = db_query("SELECT MAX(migrate_id) FROM {vopros_migrate} WHERE entity_type = 'taxonomy_term';")->fetchCol();
      // Set the current state of our import.
      $context['sandbox']['progress'] = (int) $progress[0];
      $context['sandbox']['max'] = min($top_term_id, $count + $progress[0]);
      $context['results']['count'] = 0;
    }

    $min_term_id = $context['sandbox']['progress'];
    $max_term_id = $context['sandbox']['progress'] + 50;

    $query = mssql_query("SELECT * FROM KbaseCatagories WHERE catagory_id BETWEEN $min_term_id AND $max_term_id ORDER BY catagory_id DESC");
    $vocab = taxonomy_vocabulary_machine_name_load('vopros_question_subject_catagory');
    while ($row = mssql_fetch_object($query)) {
      // Format data:
      foreach ((array) $row as $key => $value) {
        $row->$key = utf8_encode($value);
      }
      if (_vopros_migrate_create_term($row, $vocab->vid)) {
        $context['results']['count'] += 1;
      };
    }
    $context['sandbox']['progress'] += 51;
    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
    $context['message'] = t('Migrating term with id @id', array('@id' => $context['sandbox']['progress']));
  }
}

/**
 * Function to convert MSSQL time formats to ISO-8601 formats.
 */
function _vopros_migrate_mssql_date_convert($time_string) {
  $formated_string = preg_replace('/\:+\d{3}/', ' ', $time_string);
  $unix_time = strtotime($formated_string);
  return $unix_time;
}

/**
 * Create a question from the data from the migration database.
 */
function _vopros_migrate_create_question($row) {
  $count = db_select('vopros_migrate')
    ->condition('migrate_id', $row->QuestionId)
    ->condition('entity_type', 'question')
    ->countQuery()
    ->execute()
    ->fetch();
  if ($count->expression == 0 && $row->IsDeleted == 0) {
    $question_status_mapping = vopros_migrate_question_status_mapping();
    $question_status_reason_mapping = vopros_migrate_question_status_reason_mapping();
    $question_time_limit_mapping = vopros_migrate_time_limit_mapping();
    $question_user_age_mapping = vopros_migrate_user_age_mapping();
    $question_usage_mapping = vopros_migrate_question_usage_mapping();
    $qanda_service_name_mapping = vopros_migrate_question_qanda_service_name_mapping();
    $question_values = array(
      'question_title' => $row->Title,
      'question_content' => $row->Question,
      'user_name' => $row->Name,
      'user_email' => $row->Email,
      'user_postal_code' => $row->PostalCode,
      'user_mobile_phone' => $row->Phone,
      'user_age' => isset($question_user_age_mapping[$row->AgeGroupId]) ? $question_user_age_mapping[$row->AgeGroupId] : 'no inform',
      'user_gender' => '',
      'user_field_of_study' => $row->Education,
      'user_library' => '',
      'user_answer_preference' => $qanda_service_name_mapping[$row->ReceptionMethodId] == 12 ? 'sms' : 'mail',
      'created' => $row->QuestionTimestamp,
      'changed' => $row->QuestionTimestamp,
      'uid' => NULL,
      'question_status' => isset($question_status_mapping[$row->QuestionStatusId]) ? $question_status_mapping[$row->QuestionStatusId] : 'answered',
      'question_status_reason' => isset($question_status_reason_mapping[$row->QuestionStatusId]) ? $question_status_reason_mapping[$row->QuestionStatusId] : '',
      'question_deadline' => isset($question_time_limit_mapping[$row->TimeLimitId]) ? $question_time_limit_mapping[$row->TimeLimitId] : -1,
      'question_deadline_timestamp' => NULL,
      'question_usage' => isset($question_usage_mapping[$row->PurposeId]) ? $question_usage_mapping[$row->PurposeId] : 'other',
      'question_note' => $row->InternalNote,
      'qanda_service_name' => isset($qanda_service_name_mapping[$row->ReceptionMethodId]) ? $qanda_service_name_mapping[$row->ReceptionMethodId] : NULL,
      'agency_id' => NULL,
      'referenced_by' => NULL,
    );
    // Create and save the question
    $question = vopros_question_new($question_values);
    $question_wrapper = entity_metadata_wrapper('vopros_question', $question);
    if ($row->catagory_id) {
      $tid = db_select('vopros_migrate', 'v')
        ->fields('v', array('entity_id'))
        ->condition('migrate_id', $row->catagory_id)
        ->condition('entity_type', 'taxonomy_term')
        ->execute()
        ->fetch();
      if ($tid) {
        $question_wrapper->subject_catagory = array($tid->entity_id);
      }
    }
    // Hardcode tid value for vopros.biblioteksvagten.dk values.
    if ($row->IsResearchLibraryQuestion) {
      $question_wrapper->vopros_editorial = 1;
    }
    else {
      $question_wrapper->vopros_editorial = 2;
    }
    $question->save();
    // Update link in database to make sure we don't export the same question multiple times.
    if (isset($question->question_id) && $question->question_id) {
      $migration = array(
        'entity_id' => $question->question_id,
        'entity_type' => 'question',
        'migrate_id' => $row->QuestionId,
        'created' => REQUEST_TIME,
      );
      drupal_write_record('vopros_migrate', $migration);
      return $question;
    }
  }
  return FALSE;
}

/**
 * Create a question from the data from the migration database.
 */
function _vopros_migrate_create_answer($row, $question) {
  if (empty($row->Answer)) {
    return FALSE;
  }
  $uid = db_select('vopros_migrate', 'v')
    ->fields('v', array('entity_id'))
    ->condition('migrate_id', $row->AnswerUserId)
    ->condition('entity_type', 'user')
    ->execute()
    ->fetch();

  $answers = vopros_answer_load_for_question($question->question_id);

  if ($answers) {
    $answer = array_shift($answers);
    $answer->uid = $uid ? $uid->entity_id : 0;
    $answer->answer_content = $row->Answer;
    $answer->status = 'complete';
  }
  else {
    $answer = vopros_answer_new(array(
      'question_id' => $question->question_id,
      'uid' => $uid ? $uid->entity_id : 0,
      'answer_content' => $row->Answer,
      'status' => 'complete',
    ));
  }

  vopros_answer_save($answer);
}

/**
 * Performs the actual migration of public questions as a batch job.
 */
function _vopros_migrate_perform_migrate_public_questions($count, &$context) {
  if (vopros_migrate_connect()) {
    if(empty($context['sandbox'])) {
      // Get top question id:
      $result = mssql_fetch_object(mssql_query("SELECT TOP 1 QAId FROM QA ORDER BY QAId DESC"));
      $top_question_id = $result->QAId;
      $progress = db_query("SELECT MAX(migrate_id) FROM {vopros_migrate} WHERE entity_type = 'public_question';")->fetchField();
      // Set the current state of our import.
      $context['sandbox']['progress'] = (int) $progress;
      $context['sandbox']['max'] = min($top_question_id, $count);
      $context['results']['count'] = 0;
    }
    // Get top question id:
    $min_question_id = $context['sandbox']['progress'];
    $max_question_id = $context['sandbox']['progress'] + 50;

    $ms_query = mssql_query("SELECT q.* FROM QA AS q
                          WHERE q.QAId BETWEEN $min_question_id AND $max_question_id ORDER BY q.QAId DESC");

    while ($row = mssql_fetch_object($ms_query)) {
      // Format data:
      foreach ((array) $row as $key => $value) {
        $row->$key = utf8_encode($value);
      }
      $migrated = db_select('vopros_migrate', 'm')
        ->fields('m', array('entity_id'))
        ->condition('migrate_id', $row->QAId)
        ->condition('entity_type', 'public_question')
        ->execute()
        ->fetchField();

      if ($migrated) {
        continue;
      }

      $query = db_select('vopros_question', 'q');
      $query->join('vopros_migrate', 'm', 'm.entity_id = q.question_id');
      $query->condition('m.entity_type', 'question');
      $query->condition('m.migrate_id', $row->QuestionId);
      $query->fields('q', array('question_id'));
      $question_id = $query->execute()->fetchField();
      $question = vopros_question_load($question_id);
      // Bail out if question does not exist.
      if (empty($question)) {
        continue;
        //throw new VoprosQuestionDoesNotExist(t("Can't find question related to public question with id @id", array('@id' => $row->QAId)));
      }
      if ($row->IsDeleted != 1 && $row->IsUnansweredQuestion != 1) {
        $public_question = _vopros_migrate_create_public_question($row, $question);
        // Here the public question should be migrated to the public data storage.
        // For now this feature is disabled.
        if (FALSE) {
          // Handle the failire of migration
          if (!vopros_public_question_publish_question($public_question)) {
            $public_question->delete();
            throw new VoprosPublicQuestionCouldNotPublishQuestion(t('Could not create the public question at the data store'));
          }
        }
        // Save the migration if all went well.
        $migration = array(
          'entity_id' => $public_question->public_question_id,
          'entity_type' => 'public_question',
          'migrate_id' => $row->QAId,
          'created' => REQUEST_TIME,
        );
        drupal_write_record('vopros_migrate', $migration);

        $context['results']['count'] += 1;
      }
    }
    $context['sandbox']['progress'] += 51;
    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
      $context['finished'] = $context['results']['count'] / $count;
    }
    $context['message'] = t('Migrating question with id @id - current migration status: @num/@total', array('@id' => $context['sandbox']['progress'], '@num' => $context['results']['count'], '@total' => $count));
  }
}

/**
 * Performs the actual cleaning up of public questions as a batch job.
 */
function _vopros_migrate_clean_up_migrate_public_questions($count, &$context) {
  if (empty($context['sandbox'])) {
    $progress = db_query("SELECT MAX(entity_id) FROM {vopros_migrate} WHERE entity_type = 'public_question_cleaned';")->fetchField();
    // Set the current state of our import.
    $top_question_id = db_query("SELECT MAX(entity_id) FROM {vopros_migrate} WHERE entity_type = 'public_question';")->fetchField();
    $context['sandbox']['progress'] = (int) $progress;
    $context['sandbox']['max'] = min($top_question_id, $count);
    $context['results']['count'] = 0;
  }
  $min_question_id = $context['sandbox']['progress'];
  $result = db_query("SELECT entity_id FROM {vopros_migrate}
            WHERE entity_type = 'public_question'
            AND entity_id > :min_entity_id
            ORDER BY entity_id
            LIMIT 50;", array(':min_entity_id' => $context['sandbox']['progress']));

  $public_question_ids = array();
  foreach ($result as $row) {
    $public_question_ids[] = $row->entity_id;
  }
  $public_questions = vopros_public_question_load_multiple($public_question_ids);
  foreach ($public_questions as $key => $public_question) {
    // _filter_autop is used for creating <p> and <br /> tags instead of line breaks
    // _filter_url is used to create <a> tags for urls.
    // Setup dummy filter object for _filter_url.
    $filter = new stdClass();
    $filter->settings = array(
      'filter_url_length' => 100,
    );
    $public_question->question_content = _filter_autop(_filter_url($public_question->question_content, $filter));
    $public_question->answer_content = _filter_autop(_filter_url(trim($public_question->answer_content), $filter));
    $public_question->save();
    // Save that the public question was cleaned up.
    $migration = array(
      'migrate_id' => $public_question->public_question_id,
      'entity_id' => $public_question->public_question_id,
      'entity_type' => 'public_question_cleaned',
      'created' => REQUEST_TIME,
    );
    drupal_write_record('vopros_migrate', $migration);
    $context['results']['count'] += 1;
    $context['sandbox']['progress'] = $public_question->public_question_id;
    $context['finished'] = $context['results']['count'] / $count;
    $context['message'] = t('Cleaning up published questions: @num/@total', array('@id' => $context['sandbox']['progress'], '@num' => $context['results']['count'], '@total' => $count));
  }
}

/**
 * Create a public question from a MSSQL record.
 */
function _vopros_migrate_create_public_question($row, $question) {
  $uid = db_select('vopros_migrate', 'v')
    ->fields('v', array('entity_id'))
    ->condition('migrate_id', $row->TransferedByUserId)
    ->condition('entity_type', 'user')
    ->execute()
    ->fetchField();

  $public_question = vopros_public_question_question_id_load($question->question_id);

  if ($public_question) {
    $public_question->title = $row->Title;
    $public_question->answer_content = $row->Answer;
    $public_question->question_content = $row->Question;
  }
  else {
    $public_question = vopros_public_question_new(array(
      'title' => $row->Title,
      'answer_content' => $row->Answer,
      'question_content' => $row->Question,
      'question_id' => $question->question_id,
      'uid' => $uid,
    ));
  }

  // Set the subject on the public question.
  $public_question_wrapper = entity_metadata_wrapper('vopros_public_question', $public_question);
  $question_wrapper = entity_metadata_wrapper('vopros_question', $question);
  $public_question_wrapper->vopros_public_question_subject = $question_wrapper->subject_catagory->value();
  $public_question_wrapper->save();
  return $public_question;
}


/**
 * Create a user from the data from the migration database.
 */
function _vopros_migrate_create_user($row) {
  $count = db_select('vopros_migrate')
    ->condition('migrate_id', $row->UserId)
    ->condition('entity_type', 'user')
    ->countQuery()
    ->execute()
    ->fetch();
  if ($count->expression == 0 && $row->IsDeleted == 0) {
     $user_data = array(
      'name' => $row->Username,
      'pass' => user_password(), // Set random password for the new users.
      'mail' => $row->Email,
      'init' => $row->Email,
      'status' => $row->IsEnabled,
    );
    $account = user_save(NULL, $user_data);
    if ($account->uid) {
      $migration = array(
        'entity_id' => $account->uid,
        'entity_type' => 'user',
        'migrate_id' => $row->UserId,
        'created' => REQUEST_TIME,
      );
      drupal_write_record('vopros_migrate', $migration);
      return $account->uid;
    }
  }
  return FALSE;
}

/**
 * Create a taxonomy term from the data from the migration database.
 */
function _vopros_migrate_create_term($row, $vid) {
  $count = db_select('vopros_migrate')
    ->condition('migrate_id', $row->catagory_id)
    ->condition('entity_type', 'taxonomy_term')
    ->countQuery()
    ->execute()
    ->fetch();
  if ($count->expression == 0 ) {
    $term = (object) array(
      'name' => $row->catagory_name,
      'format' => 'plain_text',
      'vid' => $vid,
    );
    if (taxonomy_term_save($term)) {
      $migration = array(
        'entity_id' => $term->tid,
        'entity_type' => 'taxonomy_term',
        'migrate_id' => $row->catagory_id,
        'created' => REQUEST_TIME,
      );
      drupal_write_record('vopros_migrate', $migration);
      return $term;
    }
  }
  return FALSE;
}

function vopros_migrate_question_status_mapping() {
  $mapping = array(
    1 => 'Nyt spørgsmål',
    2 => 'Under arbejde',
    3 => 'Besvaret',
    4 => 'Overført',
    5 => 'Videresendt',
    6 => 'Bedt om flere oplysninger',
    7 => 'Afsluttet uden svar',
    14 => 'Spam',
    15 => 'IT-Taskforce',
    16 => 'Problemspørgsmål',
    17 => 'Olivia-spørgsmål',
  );
  return array(
    1 => 'new',
    2 => 'active',
    3 => 'answered',
    4 => 'closed',
    5 => 'closed',
    6 => 'closed',
    7 => 'closed',
    14 => 'closed',
    15 => 'closed',
    16 => 'closed',
    17 => 'closed',
  );
}

function vopros_migrate_question_status_reason_mapping() {
  $mapping = array(
    1 => 'Nyt spørgsmål',
    2 => 'Under arbejde',
    3 => 'Besvaret',
    4 => 'Overført',
    5 => 'Videresendt',
    6 => 'Bedt om flere oplysninger',
    7 => 'Afsluttet uden svar',
    14 => 'Spam',
    15 => 'IT-Taskforce',
    16 => 'Problemspørgsmål',
    17 => 'Olivia-spørgsmål',
  );
  return array(
    1 => '',
    2 => '',
    3 => '',
    4 => '',
    5 => '',
    6 => 'need more info',
    7 => '',
    14 => 'spam',
    15 => '',
    16 => 'problem question',
    17 => '',
  );
}


/**
 * Mapping to question user age.
 */
function vopros_migrate_user_age_mapping() {
  return array(
    1 => '0 - 14 years',
    2 => '15 - 19 years',
    3 => '20 - 25 years',
    4 => '26 - 45 years',
    5 => '46 - 65 years',
    6 => '66 +',
    7 => 'no inform',
  );
}

/**
 * Mapping to question time limit.
 */
function vopros_migrate_time_limit_mapping() {
  return array(
    1 => 2,
    2 => 8,
    3 => 24,
    4 => 48,
    5 => 24,
    6 => 168,
  );
}

/**
 * Mapping to question usage.
 */
function vopros_migrate_question_usage_mapping() {
  return array(
    6 => 'business',
    1 => 'personal',
    3 => 'school1',
    2 => 'school2',
    4 => 'school3',
    5 => 'school4',
  );
}

/**
 * Mapping for the question Q and A service name.
 */
function vopros_migrate_question_qanda_service_name_mapping() {
  return array(
    1 => 'bibvagten',
    2 => 'chat',
    3 => 'bv-e-mail',
    4 => 'bv-telefon',
    7 => 'bibliotek.dk',
    8 => 'skrivopgave',
    9 => 'musikbibliotek.dk',
    10 => 'e17',
    11 => 'engelskforalle',
    12 => 'sms',
    13 => 'messenger',
    14 => 'spørgolivia',
    15 => 'litteratursiden',
    16 => 'bv-mobilsite',
    18 => 'dr-tiltasterne',
    19 => 'danmarksradio',
    21 => 'jp',
    22 => 'facebook',
    23 => 'netlydbog',
    24 => 'ereolen',
  );
}
