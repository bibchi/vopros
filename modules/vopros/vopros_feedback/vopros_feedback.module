<?php

/**
 * @file
 */

/**
 * Implements hook_entity_info().
 */
function vopros_feedback_entity_info() {
  $return = array(
    'vopros_feedback' => array(
      'label' => t('feedback', array(), array('context' => 'a vopros feedback')),
      'controller class' => 'VoprosFeedbackEntityController',
      'entity class' => 'VoprosFeedback',
      'base table' => 'vopros_feedback',
      // No revisions, only store the users entry.
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'feedback_id',
      ),
      'bundles' => array(
        'vopros_feedback' => array(
          'label' => t('Feedback', array(), array('context' => 'a vopros feedback')),
          'admin' => array(
            'path' => 'admin/vopros/config/feedback',
            'access arguments' => array('administer feedback'),
          ),
        ),
      ),
      'load hook' => 'vopros_feedback_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_feedback_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_enabled().
 */
function vopros_feedback_enable() {
  vopros_feedback_configure_feedback();
}

/**
 * Implementation of hook_menu().
 */
function vopros_feedback_menu() {
  return array(
    'admin/vopros/config/feedback' => array(
      'title' => 'Feedback settings',
      'description' => 'Configure general feedback settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_feedback_settings_form'),
      'access arguments' => array('administer feedback'),
      'file' => 'vopros_feedback.admin.inc',
    ),
    'admin/vopros/config/feedback/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/feedback/new' => array(
      'title' => 'Create feedback',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_feedback_form', vopros_feedback_new()),
      'access callback' => 'vopros_feedback_access',
      'access arguments' => array('create'),
      'file' => 'vopros_feedback.admin.inc',
    ),
    'admin/vopros/feedback/%vopros_feedback' => array(
      'title callback' => 'vopros_feedback_title',
      'title arguments' => array(3),
       'page callback' => 'vopros_feedback_page_view',
       'page arguments' => array(3),
       'access callback' => 'vopros_feedback_access',
       'access arguments' => array('view'),
       'file' => 'vopros_feedback.admin.inc',
    ),
    'admin/vopros/feedback/%vopros_feedback/view' => array(
      'title' => 'View',
       'type' => MENU_DEFAULT_LOCAL_TASK,
       'weight' => -10,
    ),
    'admin/vopros/feedback/%vopros_feedback/edit' => array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_feedback_form', 3),
      'access callback' => 'vopros_feedback_access',
      'access arguments' => array('edit'),
      'file' => 'vopros_feedback.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    /*'admin/vopros/feedback/%vopros_feedback/delete' => array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_feedback_delete_confirm_form', 3),
      'access callback' => 'vopros_feedback_access',
      'access arguments' => array('delete'),
      'file' => 'vopros_feedback.admin.inc',
    ),*/
    'vopros/feedback/%vopros_email/%' => array(
      'title' => 'Give feedback',
      'page callback' => 'vopros_feedback_public_feedback_page',
      'page arguments' => array(2),
      'access callback' => 'vopros_feedback_give_feedback_access',
      'access arguments' => array(2, 3),
      'file' => 'vopros_feedback.pages.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function vopros_feedback_permission() {
  $permissions = array(
    'administer feedback' => array(
      'title' => t('Administer Feedback'),
      'restrict access' => TRUE,
    ),
    'access feedback' => array(
      'title' => t('Access lists of feedback, primarily for viewing and referencing'),
    ),
    'create feedback' => array(
      'title' => t('Create feedback'),
    ),
    'edit any feedback' => array(
      'title' => t('Edit any feedback'),
      'restrict access' => TRUE,
    ),
    'edit own feedback' => array(
      'title' => t('Edit own feedback'),
    ),
    'view own feedback' => array(
      'title' => t('View own feedback'),
    ),
    'view agency feedback' => array(
      'title' => t('View agency feedback'),
    ),
  );

  return $permissions;
}

/**
 * Checks feedback access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $feedback
 *   Optionally an anwer to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_feedback_access($op, $feedback = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any feedback for administrators.
  if (user_access('administer feedback', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access orders permission
  // or to a user's own orders with the view own orders permission.
  if ($op == 'view') {
    if (user_access('access feedback', $account)) {
      return TRUE;
    }
    elseif (user_access('view own feedback', $account) && $feedback->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create feedback', $account)) {
    return TRUE;
  }

  if (isset($order) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any feedback', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the uid.
    if ($account->uid && user_access('edit own feedback', $account) && $feedback->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Create a new feedback object
 */
function vopros_feedback_new($values = array()) {
  return entity_create('vopros_feedback', $values);
}

/**
 * Save a feedback
 *
 * @param $feedback
 *    The feedback object
 */
function vopros_feedback_save($feedback) {
  entity_save('vopros_feedback', $feedback);
}

/**
 * Loads an feedback by ID.
 */
function vopros_feedback_load($feedback_id, $reset = FALSE) {
  $feedback = vopros_feedback_load_multiple(array($feedback_id), array(), $reset);
  return $feedback ? reset($feedback) : FALSE;
}

/**
 * Deletes an feedback by ID.
 *
 * @param $feedback_id
 *   The ID of the feedback to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function vopros_feedback_delete($feedback_id) {
  return entity_delete('vopros_feedback', $feedback_id);
}

/**
 * Loads multiple feedback by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $feedback_ids
 *   An array of feedback IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_feedback} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal feedback loading cache.
 *
 * @return
 *   An array of feedback objects indexed by feedback_id.
 */
function vopros_feedback_load_multiple($feedback_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_feedback', $feedback_ids, $conditions, $reset);
}

/**
 * Implements hook_field_extra_fields().
 */
function vopros_feedback_field_extra_fields() {
  $extra['vopros_feedback']['vopros_feedback'] = array(
    'form' => array(
      'feedback_content' => array(
        'label' => t('Feedback content'),
        'description' => t('The actual feedback'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'feedback_content' => array(
        'label' => t('Feedback content'),
        'description' => t('The actual feedback'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_page_alter().
 */
function vopros_feedback_page_alter(&$page) {
  global $vopros_feedback_hide_regions;
  // Hide all regions exept main content area for feedback pages.
  if ($vopros_feedback_hide_regions) {
    foreach ($page as $key => &$region) {
      if (is_array($region) && !isset($region['system_main']) && strpos($key, '#') === FALSE) {
        $region['#access'] = FALSE;
      }
    }
    array_unshift($page['#theme_wrappers'], 'vopros_feedback_page');
  }
}

/**
 * Implements hook_theme().
 */
function vopros_feedback_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'vopros_feedback') . '/theme';
  return array(
    'vopros_feedback_content' => array(
      'variables' => array('feedback' => NULL),
      'path' => $path,
      'file' => 'vopros_feedback.theme.inc',
    ),
    'vopros_feedback_page' => array(
      'render element' => 'page',
      'template' => 'vopros-feedback-page',
      'path' => $path,
    ),
    'vopros_feedback_result' => array(
      'variables' => array('feedback' => NULL),
      'path' => $path,
      'file' => 'vopros_feedback.theme.inc',
    )
  );
}

/**
 * Access control function for public feedback page.
 */
function vopros_feedback_give_feedback_access($email, $hash) {
  // Need a question id.
  if (!$email->question_id || $email->type != 'outgoing') {
    return FALSE;
  }
  return md5($email->email_id . variable_get('vopros_feedback_secret', '')) == $hash;
}

/**
 * Implements hook_mail().
 */
function vopros_feedback_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify':
      $message['subject'] .= t('Notification, a answer has received feedback');
      $message['body'][] = t('The answer for the question: @title  has received feedback link: !url', array('@title' => $params['question']->question_title, '!url' => url('admin/vopros/questions/' . $params['question']->question_id, array('absolute' => TRUE))));
      break;
  }
}

/**
 * Notify users about the alteration of feedback
 *
 * @param $feedback
 *    The vopros feedback that is changed (saved)
 */
function vopros_feedback_notify($feedback) {
  $email = vopros_email_load($feedback->email_id);
  $notity = array(user_load($email->uid));
  if ($email->answer_uid != $email->uid) {
    $notity[] = user_load($email->answer_uid);
  }
  $language = language_default();
  foreach ($notity as $account) {
    drupal_mail('vopros_feedback', 'notify', $account->mail, $language, array('question' => vopros_question_load($email->question_id), 'answer' => vopros_answer_load($email->answer_id)));
  }
}

/**
 * Configure the vopros_feedback entity.
 */
function vopros_feedback_configure_feedback() {
  $type = 'vopros_feedback';
  $bundle = 'vopros_feedback';

  // Create a taxonomy term reference field
  $field_name = 'vopros_feedback_rating';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => 1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'settings' => array(
        'stars' => 5,
        'axis' => 0,
      ),
      'field_name' => $field_name,
      'type' => 'fivestar',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('Rating'),
      'widget' => array(
        'type' => 'stars',
        'module' => 'fivestar'
      ),
      'settings' => array(
        'axis' => 'vote',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'fivestar_formatter_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}


/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_feedback_vopros_question_activity_feed($question, &$feed) {
  $result = db_select('vopros_feedback', 'f')
    ->fields('f')
    ->condition('question_id', $question->question_id)
    ->execute()
    ->fetchAll();
  foreach ($result as $feedback) {
    $feed['email_' . $feedback->email_id]['body']['feedback_result'] = array(
      '#theme' => 'vopros_feedback_result',
      '#feedback' => vopros_feedback_load($feedback->feedback_id),
      '#weight' => 100,
      '#prefix' => '<div class="feedback"><h3>' . t('User feedback') . '</h3>',
      '#suffix' => '</div>',
    );
  }
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_feedback_views_data_alter(&$data) {
  $data['vopros_question']['feedback_question_id'] = array(
    'title' => t('Feedback'),
    'help' => t('Latest feedback created for question'),
    'relationship' => array(
      'handler' => 'vopros_feedback_views_handler_argument_question_id',
      'base' => 'vopros_feedback',
      'field' => 'question_id',
      'label' => 'question',
    ),
  );
  $data['vopros_feedback']['uid'] = array(
    'title' => 'User given feedback',
    'help' => 'Feedback uid',
    'field' => array(
      'field' => 'uid',
      'handler' => 'views_handler_field_user',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_user_uid',
      'name field' => 'name', // display this field in the summary
    ),
    'filter' => array(
      'title' => t('User given feedback'),
      'handler' => 'views_handler_filter_user_name',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'field' => 'uid',
      'label' => 'user',
    ),
  );

  $data['vopros_feedback']['email_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_email',
    'field' => 'email_id',
    'label' => 'email',
  );
  $data['vopros_feedback']['email_id']['argument'] = array(
    'handler' => 'views_handler_argument_numeric',
  );
}

/**
 * A handler hardcoded to use the question_id as field.
 */
class vopros_feedback_views_handler_argument_question_id extends views_handler_relationship {
  /**
   * Override init method to set the field that we want to query, the question_id
   */
  function init(&$view, &$options) {
    parent::init($view, $options);
    $this->field = 'question_id';
  }
}

/**
 * Implements hook_token_info().
 */
function vopros_feedback_token_info() {
  $info['types']['feedback-url'] = array(
    'name' => t('Feedback url'),
    'description' => t('The feedback url used in emails.'),
  );
  $info['types']['feedback-token'] = array(
    'name' => t('Feedback token'),
    'description' => t('The feedback token used in emails.'),
  );
}

/**
 * Implements hook_token_info_alter().
 */
function vopros_feedback_token_info_alter(&$info) {
  $info['tokens']['vopros_email']['feedback-url'] = array(
    'name' => t('Feedback url'),
    'type' => 'feedback-url',
    'entity-token' => TRUE,
    'description' => t('The feedback url used in emails.'),
  );
  $info['tokens']['vopros_email']['feedback-token'] = array(
    'name' => t('Feedback token'),
    'type' => 'feedback-token',
    'entity-token' => TRUE,
    'description' => t('The feedback token used in emails.'),
  );
}

/**
 * Implements hook_tokens().
 */
function vopros_feedback_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'vopros_email' && !empty($data['vopros_email'])) {
    $email = $data['vopros_email'];
    $token = $email->email_id . '/' . md5($email->email_id . variable_get('vopros_feedback_secret', ''));
    if (in_array('feedback-url', array_keys($tokens))) {
      $replacements[$tokens['feedback-url']] = url('vopros/feedback/' . $token, array('absolute' => TRUE));
    }
    if (in_array('feedback-token', array_keys($tokens))) {
      $replacements[$tokens['feedback-token']] = $token;
    }
  }
  return $replacements;
}


/**
 * Implements hook_views_api().
 */
function vopros_feedback_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vopros_feedback') . '/includes/views',
  );
}
